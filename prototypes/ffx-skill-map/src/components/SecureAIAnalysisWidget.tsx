import React, { useState, useEffect, useRef } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Brain, 
  CheckCircle2, 
  Target, 
  TrendingUp, 
  Clock,
  Shield,
  ExternalLink,
  Sparkles,
  Zap,
  BookOpen,
  ArrowDown,
  Star,
  Gem,
  AlertTriangle,
  Server
} from 'lucide-react';
import { sharedEnhancedService } from '../services/sharedService';
import { Skill, Employee } from '../types';

interface SecureAIAnalysisWidgetProps {
  employeeId: string;
  employee?: Employee;
  onGoalSelect?: (skill: Skill) => void;
  onScrollToGoals?: () => void;
  apiBaseUrl?: string; // Allow configurable API URL
}

interface AIGoalRecommendation {
  skill: Skill;
  reasoning: string;
  timeframe: 'short' | 'medium' | 'long';
  priority: 'high' | 'medium' | 'low';
  pathLength: number;
}

interface AIAnalysis {
  currentStrengths: string[];
  skillGaps: string[];
  shortTermGoals: AIGoalRecommendation[];
  longTermGoals: AIGoalRecommendation[];
  overallAssessment: string;
}

interface AnalysisResponse {
  analysis: AIAnalysis;
  metadata: {
    analysisId: string;
    timestamp: string;
    model: string;
    processingTimeMs: number;
  };
}

const SecureAIAnalysisWidget: React.FC<SecureAIAnalysisWidgetProps> = ({
  employeeId,
  employee,
  onGoalSelect,
  onScrollToGoals,
  apiBaseUrl = process.env.REACT_APP_AI_API_URL || 'http://localhost:3003'
}) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<AIAnalysis | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [analysisMetadata, setAnalysisMetadata] = useState<any>(null);
  
  const analysisCache = useRef<Map<string, { analysis: AIAnalysis; metadata: any }>>(new Map());

  const { data: skills } = useQuery({
    queryKey: ['enhanced-skills'],
    queryFn: () => sharedEnhancedService.getAllSkills(),
  });

  const { data: allEmployees } = useQuery({
    queryKey: ['enhanced-employees'],
    queryFn: () => sharedEnhancedService.getAllEmployees(),
  });

  // Get the API key for this service (generated from environment)
  const getApiKey = () => {
    // For development, use the key generated by the local API server
    if (process.env.NODE_ENV === 'development') {
      return 'bca0a6e7be320646b7f584bd5bea44f7'; // Matches local development server
    }
    // For production, this will be dynamically configured during deployment
    return process.env.REACT_APP_AI_API_KEY || 'production-api-key';
  };

  const analyzeSkillsWithAPI = async (): Promise<{ analysis: AIAnalysis; metadata: any }> => {
    if (!employee || !skills || !allEmployees) {
      throw new Error('Missing required data for analysis');
    }

    // Check cache first
    const cacheKey = `${employeeId}-${employee.mastered_skills.join(',')}`;
    const cached = analysisCache.current.get(cacheKey);
    if (cached) {
      return cached;
    }

    // Get skill recommendations for context
    const recommendations = await sharedEnhancedService.getSkillRecommendations(employeeId);
    
    // Prepare request payload
    const requestPayload = {
      character: {
        name: employee.name,
        role: employee.role,
        currentXP: employee.current_xp || 0,
        level: employee.level || 1,
        masteredSkills: employee.mastered_skills
      },
      availableSkills: recommendations.map(rec => rec.skill),
      allSkills: skills,
      context: {
        // Add any additional context here
      }
    };

    try {
      const response = await fetch(`${apiBaseUrl}/api/v1/ai-analysis/skill-recommendations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': getApiKey()
        },
        body: JSON.stringify(requestPayload)
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Authentication failed. Please contact support if this persists.');
        } else if (response.status === 429) {
          throw new Error('Service is busy. Please try again in a few minutes.');
        } else if (response.status === 503) {
          throw new Error('AI analysis service is temporarily unavailable. Please try again later.');
        }
        throw new Error(`Analysis request failed: ${response.status} ${response.statusText}`);
      }

      const data: AnalysisResponse = await response.json();
      
      if (!data.analysis) {
        throw new Error('Invalid response from analysis service');
      }

      // Cache the result
      const result = { analysis: data.analysis, metadata: data.metadata };
      analysisCache.current.set(cacheKey, result);
      
      return result;

    } catch (err) {
      console.error('AI Analysis API error:', err);
      throw err;
    }
  };

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    setError(null);

    try {
      const result = await analyzeSkillsWithAPI();
      setAnalysis(result.analysis);
      setAnalysisMetadata(result.metadata);
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to analyze skills. Please try again later.';
      setError(errorMessage);
      setAnalysis(null);
      setAnalysisMetadata(null);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleGoalSelection = (recommendation: AIGoalRecommendation) => {
    if (onGoalSelect && recommendation.skill) {
      onGoalSelect(recommendation.skill);
      // Scroll to goal planner section
      if (onScrollToGoals) {
        setTimeout(() => onScrollToGoals(), 100);
      }
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'combat': return <Target className="h-4 w-4" />;
      case 'magic': return <Zap className="h-4 w-4" />;
      case 'support': return <CheckCircle2 className="h-4 w-4" />;
      case 'special': return <Star className="h-4 w-4" />;
      case 'advanced': return <BookOpen className="h-4 w-4" />;
      default: return <Target className="h-4 w-4" />;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'combat': return 'bg-red-100 text-red-800 border-red-300';
      case 'magic': return 'bg-blue-100 text-blue-800 border-blue-300';
      case 'support': return 'bg-green-100 text-green-800 border-green-300';
      case 'special': return 'bg-purple-100 text-purple-800 border-purple-300';
      case 'advanced': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'low': return 'bg-green-100 text-green-800 border-green-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  if (!employeeId || !employee) {
    return (
      <Card className="border-border/50 shadow-elegant mx-2 sm:mx-4">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-base sm:text-lg">
            <Brain className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
            AI Skill Analysis
          </CardTitle>
          <CardDescription className="text-sm">
            Get AI-powered recommendations for your next skill goals
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center py-6 sm:py-8">
          <Brain className="h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mx-auto mb-4" />
          <p className="text-muted-foreground text-sm sm:text-base">
            Select an employee to get AI-powered skill recommendations
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border-border/50 shadow-elegant mx-2 sm:mx-4 max-w-full">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-3 text-base sm:text-lg">
          <Brain className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
          {employee.images?.face && (
            <div className="relative">
              <img 
                src={employee.images.face} 
                alt={employee.name}
                className="w-10 h-12 sm:w-12 sm:h-16 object-cover rounded-lg shadow-sm flex-shrink-0 max-w-full"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.style.display = 'none';
                }}
              />
            </div>
          )}
          <span className="truncate">AI Analysis for {employee.name}</span>
        </CardTitle>
        <CardDescription className="text-sm flex items-center gap-2">
          <Shield className="h-3 w-3 text-green-600" />
          Secure server-side analysis â€¢ No API keys needed
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4 max-w-full">
        {/* Security info */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-3">
          <div className="flex items-start gap-3">
            <Server className="h-4 w-4 text-green-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1 min-w-0">
              <p className="text-sm text-green-700">
                <strong>Secure Analysis:</strong> Your skill data is processed through our secure server. 
                No API keys or personal information are stored in your browser.
              </p>
            </div>
          </div>
        </div>

        {/* Analysis Button */}
        <Button 
          onClick={handleAnalyze}
          disabled={isAnalyzing}
          className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-medium"
          size="lg"
        >
          {isAnalyzing ? (
            <>
              <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
              Analyzing Skills...
            </>
          ) : (
            <>
              <Sparkles className="h-4 w-4 mr-2" />
              Get AI Analysis of Next Steps
            </>
          )}
        </Button>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <div className="flex items-start gap-2">
              <AlertTriangle className="h-4 w-4 text-red-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <p className="text-sm text-red-700">{error}</p>
                {error.includes('Authentication') && (
                  <p className="text-xs text-red-600 mt-1">
                    This usually indicates a deployment configuration issue.
                  </p>
                )}
              </div>
            </div>
          </div>
        )}

        {analysis && (
          <div className="space-y-4">
            {/* Analysis Metadata */}
            {analysisMetadata && (
              <div className="text-xs text-gray-500 flex items-center gap-4 pb-2 border-b">
                <span>Analysis ID: {analysisMetadata.analysisId.substring(0, 8)}...</span>
                <span>Model: {analysisMetadata.model}</span>
                <span>Processing: {analysisMetadata.processingTimeMs}ms</span>
              </div>
            )}

            {/* Overall Assessment */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-4">
              <h3 className="font-medium text-blue-800 mb-2 flex items-center gap-2">
                <TrendingUp className="h-4 w-4" />
                Overall Assessment
              </h3>
              <p className="text-sm text-blue-700">{analysis.overallAssessment}</p>
            </div>

            {/* Current Strengths */}
            {analysis.currentStrengths.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-green-700 flex items-center gap-2">
                  <CheckCircle2 className="h-4 w-4" />
                  Current Strengths
                </h4>
                <div className="flex flex-wrap gap-2">
                  {analysis.currentStrengths.map((strength, index) => (
                    <Badge key={index} variant="outline" className="bg-green-50 text-green-700 border-green-300 text-xs">
                      {strength}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Skill Gaps */}
            {analysis.skillGaps.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-medium text-orange-700 flex items-center gap-2">
                  <Target className="h-4 w-4" />
                  Areas for Growth
                </h4>
                <div className="flex flex-wrap gap-2">
                  {analysis.skillGaps.map((gap, index) => (
                    <Badge key={index} variant="outline" className="bg-orange-50 text-orange-700 border-orange-300 text-xs">
                      {gap}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Short Term Goals */}
            {analysis.shortTermGoals.length > 0 && (
              <div className="space-y-3">
                <h4 className="font-medium text-blue-700 flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  Recommended Short-Term Goals
                </h4>
                <div className="space-y-2">
                  {analysis.shortTermGoals.map((goal, index) => (
                    <div 
                      key={index}
                      className="p-3 bg-blue-50/50 border border-blue-200 rounded-lg hover:bg-blue-100/50 transition-colors"
                    >
                      <div className="flex items-center justify-between gap-2 mb-2">
                        <div className="flex items-center gap-2 flex-1 min-w-0">
                          <div className="p-1 rounded bg-blue-100">
                            {getCategoryIcon(goal.skill.category)}
                          </div>
                          <span className="font-medium text-sm truncate">{goal.skill.name}</span>
                          <Badge variant="outline" className={`text-xs flex-shrink-0 ${getCategoryColor(goal.skill.category)}`}>
                            {goal.skill.category}
                          </Badge>
                          <Badge variant="outline" className={`text-xs flex-shrink-0 ${getPriorityColor(goal.priority)}`}>
                            {goal.priority}
                          </Badge>
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleGoalSelection(goal)}
                          className="text-xs bg-blue-600 text-white border-blue-600 hover:bg-blue-700 flex-shrink-0"
                        >
                          <ArrowDown className="h-3 w-3 mr-1" />
                          Set Goal
                        </Button>
                      </div>
                      <p className="text-xs text-blue-600 italic">{goal.reasoning}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Long Term Goals */}
            {analysis.longTermGoals.length > 0 && (
              <div className="space-y-3">
                <h4 className="font-medium text-purple-700 flex items-center gap-2">
                  <Gem className="h-4 w-4" />
                  Recommended Long-Term Goals
                </h4>
                <div className="space-y-2">
                  {analysis.longTermGoals.map((goal, index) => (
                    <div 
                      key={index}
                      className="p-3 bg-purple-50/50 border border-purple-200 rounded-lg hover:bg-purple-100/50 transition-colors"
                    >
                      <div className="flex items-center justify-between gap-2 mb-2">
                        <div className="flex items-center gap-2 flex-1 min-w-0">
                          <div className="p-1 rounded bg-purple-100">
                            {getCategoryIcon(goal.skill.category)}
                          </div>
                          <span className="font-medium text-sm truncate">{goal.skill.name}</span>
                          <Badge variant="outline" className={`text-xs flex-shrink-0 ${getCategoryColor(goal.skill.category)}`}>
                            {goal.skill.category}
                          </Badge>
                          <Badge variant="outline" className={`text-xs flex-shrink-0 ${getPriorityColor(goal.priority)}`}>
                            {goal.priority}
                          </Badge>
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleGoalSelection(goal)}
                          className="text-xs bg-purple-600 text-white border-purple-600 hover:bg-purple-700 flex-shrink-0"
                        >
                          <ArrowDown className="h-3 w-3 mr-1" />
                          Set Goal
                        </Button>
                      </div>
                      <p className="text-xs text-purple-600 italic">{goal.reasoning}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default SecureAIAnalysisWidget;